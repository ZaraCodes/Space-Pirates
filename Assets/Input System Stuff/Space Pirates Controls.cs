//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Input System Stuff/Space Pirates Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @SpacePiratesControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @SpacePiratesControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Space Pirates Controls"",
    ""maps"": [
        {
            ""name"": ""SpaceShip"",
            ""id"": ""e0571b37-02bd-44e6-9229-22e9233f3ca3"",
            ""actions"": [
                {
                    ""name"": ""Accelerate"",
                    ""type"": ""Button"",
                    ""id"": ""2d3c8f40-3539-430b-8edf-15b5259ececd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1f4959fb-16a4-4e18-99b6-abfc419e0690"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Land"",
                    ""type"": ""Button"",
                    ""id"": ""1bfe91a7-4cff-40c4-a4b2-2acd77c73394"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit Orbit"",
                    ""type"": ""Button"",
                    ""id"": ""a8ec919a-2814-4cd4-acdc-7d28f0468ddf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6707d4af-32c2-4ecb-8380-47f45f23c498"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c37b5029-1470-4768-86ff-87b5e2e10d23"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""Accelerate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e4fb7500-c306-4d4b-83e6-b8c21bf23240"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3b0de518-f5c5-4823-922d-15782280a3b9"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a235fe3b-1207-4930-95c6-c63ff4cb95b1"",
                    ""path"": ""<Gamepad>/dpad/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Land"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""64249dbf-0ad8-4847-9a06-e9506a449ed4"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""Land"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3d2eb6ca-f3ca-45ba-b887-8994c9e37798"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Exit Orbit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86256b0a-af2c-424a-b64d-fc14ab4e941f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""Exit Orbit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""ef6a0b7e-2438-41ff-8865-9579358e13da"",
            ""actions"": [
                {
                    ""name"": ""UI Back"",
                    ""type"": ""Button"",
                    ""id"": ""b6156a5f-6fb9-4db4-8b4a-bf53c307c98d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""001b5856-5f88-4d7e-9789-a9164cded558"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Proceed Dialog"",
                    ""type"": ""Button"",
                    ""id"": ""51b81a0f-6dff-461a-b661-d96d81700399"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c7cd66c8-6588-42d2-bc2f-6553ef2ccf6e"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""UI Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43e88560-b802-4708-b0d2-1556fb19d66b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""UI Back"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""451da805-778b-4e94-98cb-1a7795bf6cf1"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36df2007-e026-4b69-a9e7-fcd1c462bd1f"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9391722f-ae17-4d84-9467-889e9500e78b"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Proceed Dialog"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b73276c-7f67-401a-9c47-ea42b925ac4a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""Proceed Dialog"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Nova"",
            ""id"": ""66566ffd-f44d-4211-a101-258fa713a0ee"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""d44b35fc-47a6-419e-a7f0-57e2825ae7da"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Melee Attack"",
                    ""type"": ""Button"",
                    ""id"": ""4127f039-5944-451d-b58f-d14faa1856d5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ranged Attack"",
                    ""type"": ""Button"",
                    ""id"": ""2372a23c-6602-4a1c-991f-2c5c72c884f4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""PassThrough"",
                    ""id"": ""293a5765-720e-4d29-a275-0a8fd4c677f8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""50f988bd-7900-450f-88e0-c640bf6e04aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e2b63bd5-301b-47c7-a880-9bbb6ca3f6ff"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Move KB"",
                    ""id"": ""af1ec21d-9b2c-4d62-950f-cf07cf4b31d6"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c8a506ae-780a-4908-81f2-8169f2d76167"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""91b9cece-6669-4b3e-842c-2d49b20513f9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""16cbc0a3-1b3a-47d7-a0eb-3363cd3c766f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b6b2eb18-b3fd-4e2e-9f69-5f0b2f5c1b23"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""89103922-8b3a-45a7-978e-f488df24dbf0"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Melee Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f818fcb-a74f-400c-a2ae-e9c0d87d7df4"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Ranged Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9a6d6e88-e960-4a1d-9aea-193f4e9e9a36"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""Ranged Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""630adb00-b8bd-4dd9-8a8e-474c309d9ba2"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f552c5ff-0f2c-4925-8d96-f5de1ee8d3b2"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1f1238cc-5283-4681-a743-59e955f2e5e3"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""beb16047-0d9f-47b0-9a11-1a11be7d7a64"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse + Keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Mouse + Keyboard"",
            ""bindingGroup"": ""Mouse + Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // SpaceShip
        m_SpaceShip = asset.FindActionMap("SpaceShip", throwIfNotFound: true);
        m_SpaceShip_Accelerate = m_SpaceShip.FindAction("Accelerate", throwIfNotFound: true);
        m_SpaceShip_Rotate = m_SpaceShip.FindAction("Rotate", throwIfNotFound: true);
        m_SpaceShip_Land = m_SpaceShip.FindAction("Land", throwIfNotFound: true);
        m_SpaceShip_ExitOrbit = m_SpaceShip.FindAction("Exit Orbit", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_UIBack = m_UI.FindAction("UI Back", throwIfNotFound: true);
        m_UI_Pause = m_UI.FindAction("Pause", throwIfNotFound: true);
        m_UI_ProceedDialog = m_UI.FindAction("Proceed Dialog", throwIfNotFound: true);
        // Nova
        m_Nova = asset.FindActionMap("Nova", throwIfNotFound: true);
        m_Nova_Move = m_Nova.FindAction("Move", throwIfNotFound: true);
        m_Nova_MeleeAttack = m_Nova.FindAction("Melee Attack", throwIfNotFound: true);
        m_Nova_RangedAttack = m_Nova.FindAction("Ranged Attack", throwIfNotFound: true);
        m_Nova_Aim = m_Nova.FindAction("Aim", throwIfNotFound: true);
        m_Nova_Interact = m_Nova.FindAction("Interact", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // SpaceShip
    private readonly InputActionMap m_SpaceShip;
    private List<ISpaceShipActions> m_SpaceShipActionsCallbackInterfaces = new List<ISpaceShipActions>();
    private readonly InputAction m_SpaceShip_Accelerate;
    private readonly InputAction m_SpaceShip_Rotate;
    private readonly InputAction m_SpaceShip_Land;
    private readonly InputAction m_SpaceShip_ExitOrbit;
    public struct SpaceShipActions
    {
        private @SpacePiratesControls m_Wrapper;
        public SpaceShipActions(@SpacePiratesControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Accelerate => m_Wrapper.m_SpaceShip_Accelerate;
        public InputAction @Rotate => m_Wrapper.m_SpaceShip_Rotate;
        public InputAction @Land => m_Wrapper.m_SpaceShip_Land;
        public InputAction @ExitOrbit => m_Wrapper.m_SpaceShip_ExitOrbit;
        public InputActionMap Get() { return m_Wrapper.m_SpaceShip; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SpaceShipActions set) { return set.Get(); }
        public void AddCallbacks(ISpaceShipActions instance)
        {
            if (instance == null || m_Wrapper.m_SpaceShipActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SpaceShipActionsCallbackInterfaces.Add(instance);
            @Accelerate.started += instance.OnAccelerate;
            @Accelerate.performed += instance.OnAccelerate;
            @Accelerate.canceled += instance.OnAccelerate;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @Land.started += instance.OnLand;
            @Land.performed += instance.OnLand;
            @Land.canceled += instance.OnLand;
            @ExitOrbit.started += instance.OnExitOrbit;
            @ExitOrbit.performed += instance.OnExitOrbit;
            @ExitOrbit.canceled += instance.OnExitOrbit;
        }

        private void UnregisterCallbacks(ISpaceShipActions instance)
        {
            @Accelerate.started -= instance.OnAccelerate;
            @Accelerate.performed -= instance.OnAccelerate;
            @Accelerate.canceled -= instance.OnAccelerate;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @Land.started -= instance.OnLand;
            @Land.performed -= instance.OnLand;
            @Land.canceled -= instance.OnLand;
            @ExitOrbit.started -= instance.OnExitOrbit;
            @ExitOrbit.performed -= instance.OnExitOrbit;
            @ExitOrbit.canceled -= instance.OnExitOrbit;
        }

        public void RemoveCallbacks(ISpaceShipActions instance)
        {
            if (m_Wrapper.m_SpaceShipActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISpaceShipActions instance)
        {
            foreach (var item in m_Wrapper.m_SpaceShipActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SpaceShipActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SpaceShipActions @SpaceShip => new SpaceShipActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_UIBack;
    private readonly InputAction m_UI_Pause;
    private readonly InputAction m_UI_ProceedDialog;
    public struct UIActions
    {
        private @SpacePiratesControls m_Wrapper;
        public UIActions(@SpacePiratesControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @UIBack => m_Wrapper.m_UI_UIBack;
        public InputAction @Pause => m_Wrapper.m_UI_Pause;
        public InputAction @ProceedDialog => m_Wrapper.m_UI_ProceedDialog;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @UIBack.started += instance.OnUIBack;
            @UIBack.performed += instance.OnUIBack;
            @UIBack.canceled += instance.OnUIBack;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
            @ProceedDialog.started += instance.OnProceedDialog;
            @ProceedDialog.performed += instance.OnProceedDialog;
            @ProceedDialog.canceled += instance.OnProceedDialog;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @UIBack.started -= instance.OnUIBack;
            @UIBack.performed -= instance.OnUIBack;
            @UIBack.canceled -= instance.OnUIBack;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
            @ProceedDialog.started -= instance.OnProceedDialog;
            @ProceedDialog.performed -= instance.OnProceedDialog;
            @ProceedDialog.canceled -= instance.OnProceedDialog;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);

    // Nova
    private readonly InputActionMap m_Nova;
    private List<INovaActions> m_NovaActionsCallbackInterfaces = new List<INovaActions>();
    private readonly InputAction m_Nova_Move;
    private readonly InputAction m_Nova_MeleeAttack;
    private readonly InputAction m_Nova_RangedAttack;
    private readonly InputAction m_Nova_Aim;
    private readonly InputAction m_Nova_Interact;
    public struct NovaActions
    {
        private @SpacePiratesControls m_Wrapper;
        public NovaActions(@SpacePiratesControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Nova_Move;
        public InputAction @MeleeAttack => m_Wrapper.m_Nova_MeleeAttack;
        public InputAction @RangedAttack => m_Wrapper.m_Nova_RangedAttack;
        public InputAction @Aim => m_Wrapper.m_Nova_Aim;
        public InputAction @Interact => m_Wrapper.m_Nova_Interact;
        public InputActionMap Get() { return m_Wrapper.m_Nova; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NovaActions set) { return set.Get(); }
        public void AddCallbacks(INovaActions instance)
        {
            if (instance == null || m_Wrapper.m_NovaActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NovaActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @MeleeAttack.started += instance.OnMeleeAttack;
            @MeleeAttack.performed += instance.OnMeleeAttack;
            @MeleeAttack.canceled += instance.OnMeleeAttack;
            @RangedAttack.started += instance.OnRangedAttack;
            @RangedAttack.performed += instance.OnRangedAttack;
            @RangedAttack.canceled += instance.OnRangedAttack;
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
        }

        private void UnregisterCallbacks(INovaActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @MeleeAttack.started -= instance.OnMeleeAttack;
            @MeleeAttack.performed -= instance.OnMeleeAttack;
            @MeleeAttack.canceled -= instance.OnMeleeAttack;
            @RangedAttack.started -= instance.OnRangedAttack;
            @RangedAttack.performed -= instance.OnRangedAttack;
            @RangedAttack.canceled -= instance.OnRangedAttack;
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
        }

        public void RemoveCallbacks(INovaActions instance)
        {
            if (m_Wrapper.m_NovaActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INovaActions instance)
        {
            foreach (var item in m_Wrapper.m_NovaActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NovaActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NovaActions @Nova => new NovaActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_MouseKeyboardSchemeIndex = -1;
    public InputControlScheme MouseKeyboardScheme
    {
        get
        {
            if (m_MouseKeyboardSchemeIndex == -1) m_MouseKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse + Keyboard");
            return asset.controlSchemes[m_MouseKeyboardSchemeIndex];
        }
    }
    public interface ISpaceShipActions
    {
        void OnAccelerate(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnLand(InputAction.CallbackContext context);
        void OnExitOrbit(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnUIBack(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
        void OnProceedDialog(InputAction.CallbackContext context);
    }
    public interface INovaActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnMeleeAttack(InputAction.CallbackContext context);
        void OnRangedAttack(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
    }
}
